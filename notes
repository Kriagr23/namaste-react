package.json is a configuration for json
Bundler - bundle our app so that it can be shipped to producted 
create-react-app using webpack bundler behind the scene
ex : parcel , webpack , vite etc

two typer of dependencies - 1 dev and 2 normal 
dev in developement phase 
normal are in prod also 
 
^ - caret - update version automatically (safe)
tilde then only updates the major version 

package-lock have exact version of all the dependencies 
transitive dependencies 

npx - execute the package 

normal browser scripts cannot have import and export 
type = "module" - it is not normal script its a module

Lec3- React elemet 
React.createElement (React element) => JS object => HTMLelement(render)
//const heading = React.createElement("h1",{id:"heading"},"Hello World from React");
JSX - HTML-like or XML-like syntax, its not HTMl
JSX(Transpiled before it reaches Jsengine) => who ? PARCEL by a package Babel
how is this jsx code running? JSX => React.createElement => ReactElement-Js Obj => HTMLelement
Attributes to JSX are given in Camel case 

//React element 
const heading = <h1 className="head">Hello World from JSX</h1>;
//Root for React app whatever we create in React will be rendered inside this root
const root = ReactDOM.createRoot(document.getElementById("root"));

//React Component 
//what is component? 1) class based components-old 2)functional based component-new
//React functional component - normal js component which returns some JSX element - name it with capital letter 
const num = 10;
const HeadingComponent = () => (
    <div id="container">
        {heading}
        {num}
        <TitleComponent/>
        <h1 className="head"> Namaste React Functional Component</h1>
    </div>
     
)
//component composition - one component can be used inside another component
const TitleComponent = () => (
    <div id="title">  
        <h1 className="title"> Namaste React Functional Component from title</h1>
    </div>
)
//const HeadingComponent2 = () => (<h1 className="head"> Namaste React Functional Component diff syntax </h1>);
//syntax that babel understands that it is a component 
root.render(<HeadingComponent />);
//root.render(heading);